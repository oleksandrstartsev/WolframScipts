/*==============================================*/
/*  FRACT3D : Computation of Frac Dimension for */
/* digital surfaces using the triangular prism  */
/* surface area method.    Keith Clarke 8-13-85 */
/*==============================================*/
#include <stdio.h>
#include <math.h>
#define NBYTES 4    /* Number of bytes per elevation     */
#define CBYTE "%4c" /*same values, for input format      */
#define MAXROW 258  /*Upper size limits of array for DEM */
#define MAXCOL 258  /*plus two. Change numbers to suit   */
short int matrix[MAXROW][MAXCOL];
double area[25],
       resolution[25];
int    rowmax, colmax, steps, begin_row, end_row,
       begin_col, end_col, time;
/*==================================================*/
/*   function center: calculate area for calculation*/
/*==================================================*/
int    center()
extern int rowmax, colmax, steps, begin_row, end_row, begin_col, end_col;
{ 
    double floor();
     int    n=1, size, slop;
/*Select short side of array*/
     size= (rowmax>colmax) ? colmax : rowmax;
     steps=1;
/*Find power of two which is less than short side */
     do{
   steps++;
   n*=2;
        }
     while (n<size);
     n/=2;
     steps--;
/*Calculate begin and end rows & cols for processing */
    slop = floor((rowmax-n)/2.);
    begin_row=slop+1;
    end_row=n+slop+1;
    slop=floor ((colmax-n)/2.);
    begin_col=slop+1;
    end_col=n+slop+1;
    printf("\n Processing rows %4d to %4d", begin_row,end_row);
    printf("\n and columns %4d to %4d\n", begin_col, end_col);
    return;
}
/*========================================================*/
/*   function fractal: compute the fractal dimension      */
/* =======================================================*/
int fractal()
extern short int matrix[][MAXCOL];
extern double area[], resolution[];
extern int begin_row, end_row, begin_col, end_col, steps;
{
    int   row, col, step = 1;
    float side, diag;
    double a,b,c,d,e,w,x,y,z,o,p,q,r,sa,sb,sc,sd,
           aa,ab,ac,ad, surface_area, sqrt();
/*Repeat for area sequence 1,4,16,64,256 etc. */
   for (time=1; time<=steps; time++){
   surface_area=0.0;
     /*Set length of sides of triangles */
   side=(float)step;
   diag=(float)step*sqrt(2.0)/2.0;
  /*Process whole array at this size */
for (row=begin_row; row<end_row; row+=step){
  for(col=begin_col; col<end_col; col+=step){
      a=(float) matrix[row][col];
      b=(float) matrix[row][col+step];
      c=(float) matrix[row+step][col+step];
      d=(float) matrix[row+step][col];
/* e is the center point of four pixel values*/
      e=0.25*(a+b+c+d);
/*w,x,y,z are external sides of the square   */
      w=sqrt((a-b)*(a-b)+side*side);
      x=sqrt((b-c)*(b-c)+side*side);
      y=sqrt((c-d)*(c-d)+side*side);
      z=sqrt((a-d)*(a-d)+side*side);
/* o,p,q,r are internal sides of triangles   */
      o=sqrt((a-e)*(a-e)+diag*diag);
      p=sqrt((b-e)*(b-e)+diag*diag);
      q=sqrt((c-e)*(c-e)+diag*diag);
      r=sqrt((d-e)*(d-e)+diag*diag);
/* Compute values from Heron's formula       */
      sa=0.5*(w+p+o);
      sb=0.5*(x+p+q);
      sc=0.5*(y+q+r);
      sd=0.5*(z+o+r);
/* Solve areas from Heron's formula       */
      aa=sqrt(fabs(sa*(sa-w)*(sa-p)*(sa-o)));
      ab=sqrt(fabs(sb*(sb-x)*(sb-p)*(sb-q)));
      ac=sqrt(fabs(sc*(sc-y)*(sc-q)*(sc-r)));
      ad=sqrt(fabs(sd*(sd-z)*(sd-o)*(sd-r)));
/* Add to total surface area                 */
      surface_area+=aa+ab+ac+ad;
      }
   }
/*Save area and resolution, increment step size*/
     area[time]= surface_area;
     resolution[time]=step*step;
     step*=2;
     }
    return;
}
/*==================================================*/
/*    Function Linefit: Least Squares Log/Log fir   */
/*==================================================*/
int linefit ()
extern double area[],resolution[];
extern int steps;
{
   double resavg=0.0, areaavg=0.0, cross=0.0, sumres=0.0,
          sumarea=0.0, dimesion, beta, r;
   int    n;
   printf ("\n Step Resolution Area \n");
/*Do log transform and compute means*/
   for (n=1; n<=steps; n++){
   printf("\n %4d %11.2f %11.2f",n, resolution[n], area[n]);
   resolution[n]=log(resolution[n]);
   area[n]=log(area[n]);
   resavg+=resolution[n];
   areaavg+=area[n];
   }
    if(steps<3) {
    printf("\n Too few calculated data points regression\n");
    exit();
                  }
    resavg/=(float)(steps);
    areaavg/=(float)(steps);
/*Compute sums of squares      */
    for(n=1; n<=steps; n++){
    cross+=((resolution[n]-resavg)*(area[n]-areaavg));
    sumres+=((resolution[n]-resavg)*(resolution[n]-resavg));
    sumarea+=((area[n]-areaavg)*(area[n]-areaavg));
     }
/*Compute correlation coefficient and fractal dimension */
  r=cross/sqrt(sumres*sumarea);
  beta=r*sqrt(sumarea)/sqrt(sumres);
  dimension=2.0-beta;
  printf("\n ** Fractional Dimension= %10f", dimension);
  printf("\n    r-squared= %10f",r*r);
  printf("\n    with %4d observations\n",steps);
  printf("\n    ln(resolution)");
  for(n=1; n<=steps;n++){
  printf("%8.5f ", resolution[n]);
                         }
  printf("\n      ln(area)     ");
   for(n=1;n<=steps;n++){
   printf("%8.5f ", area[n]);
                          }
    printf("\n");
    return;
    }

/*===================================================*/
/*     function readdem: read elevation file         */
/*===================================================*/
int    readdem ()
extern int rowmax,colmax;
extern short int matrix[][MAXCOL];
{ 
       double atof();
       FILE * fopen(), *datafile;
       int i,j,zmax,zmin;
       register char c, buf[NBYTES];
 /* promt standart input for array size */
       printf("\n Enter the number of rows in the matrix    :");
       scanf("%d", &rowmax);
       printf("  Enter the number of rows in the matrix  :");
       scanf("%d", &colmax);
       if((rowmax>MAXROW)||(colmax>MAXCOL)){
     printf("\n Matrix too large. Current limit is %6d",MAXCOL);
     printf("\n for columns, %6d for rows. Edit source file,", MAXROW);
     printf("\n change #define statements, and recompile");
     exit();
  }
/* Open DEM file "image" in this directory */
     if((datafile = fopen("image","r"))==NULL){
     printf("\n ** Unable to open data input file");
     exit();
     }
/* Determine correct input format */
   for(i=1;i<=rowmax;i++){
  for(j=1;j<=colmax;j++){
     c=fscanf(datafile,CBYTE,buf);
     matrix[i][j]=atoi(buf);
     if((i==1)&&(j==1)){
         zmin=matrix[i][j];
         zmax=matrix[i][j];
     }
     if(matrix[i][j]<zmin)
        zmin=matrix[i][j];
     if(matrix[i][j]>zmax)
        zmax=matrix[i][j];
     }
       c=getc(datafile); /*Read the eol character */
     }
      printf("\n Minimum elevation : %10d",zmin);
      printf("\n Maximum elevation : %10d",zmax);
      printf("\n ** Data input complete ** ");
      fclose(datafile);
      }
/* Begin main program */
main () {
      int readdem(), fractal(), linefit();
      readdem();  /*Read the DEM array */
      center();   /* Select part of array for processing*/
      fractal();  /*Compute area vs resolution for DEM */
      linefit();  /*Fit line to log-log curve */
         }
     